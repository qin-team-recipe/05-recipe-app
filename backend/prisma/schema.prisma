generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String
  imgPath       String?        @map("img_path") @db.Text
  introduction  String         @db.Text
  twitterId     String?        @map("twitter_id")
  instagramId   String?        @map("instagram_id")
  siteUrl       String?        @map("site_url")
  createdAt     DateTime       @default(dbgenerated("NOW()")) @map("created_at") @db.DateTime
  updatedAt     DateTime       @default(dbgenerated("NOW() ON UPDATE NOW()")) @map("updated_at") @db.DateTime
  recipes       Recipe[]
  favorites     Favorite[]
  followers     Follow[]       @relation("follower")
  followeds     Follow[]       @relation("followed")
  shoppingMemos ShoppingMemo[]
  shoppingMenus ShoppingMenu[]

  @@fulltext([name, introduction])
  @@map("users")
}

model Recipe {
  id            String         @id @default(cuid())
  userId        String         @map("user_id")
  name          String
  description   String         @db.Text
  servingCount  Int            @map("serving_count") @db.UnsignedTinyInt
  favoriteCount Int            @map("favorite_count") @db.UnsignedInt
  draftFlag     Boolean        @default(true) @map("draft_flag")
  createdAt     DateTime       @default(dbgenerated("NOW()")) @map("created_at") @db.DateTime
  updatedAt     DateTime       @default(dbgenerated("NOW() ON UPDATE NOW()")) @map("updated_at") @db.DateTime
  user          User           @relation(fields: [userId], references: [id])
  recipeSteps   RecipeStep[]
  recipeLinks   RecipeLink[]
  recipeImages  RecipeImage[]
  recipeItems   RecipeItem[]
  favorites     Favorite[]
  shoppingMenus ShoppingMenu[]

  @@fulltext([name, description])
  @@map("recipes")
}

model RecipeStep {
  id          Int      @id @default(autoincrement())
  recipeId    String   @map("recipe_id")
  description String   @db.Text
  stepNum     Int      @map("step_num") @db.UnsignedTinyInt
  createdAt   DateTime @default(dbgenerated("NOW()")) @map("created_at") @db.DateTime
  updatedAt   DateTime @default(dbgenerated("NOW() ON UPDATE NOW()")) @map("updated_at") @db.DateTime
  recipe      Recipe   @relation(fields: [recipeId], references: [id])

  @@fulltext([description])
  @@map("recipe_steps")
}

model RecipeLink {
  id        Int      @id @default(autoincrement())
  recipeId  String   @map("recipe_id")
  url       String   @db.Text
  createdAt DateTime @default(dbgenerated("NOW()")) @map("created_at") @db.DateTime
  updatedAt DateTime @default(dbgenerated("NOW() ON UPDATE NOW()")) @map("updated_at") @db.DateTime
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@map("recipe_links")
}

model RecipeImage {
  id        Int      @id @default(autoincrement())
  recipeId  String   @map("recipe_id")
  path      String   @db.Text
  createdAt DateTime @default(dbgenerated("NOW()")) @map("created_at") @db.DateTime
  updatedAt DateTime @default(dbgenerated("NOW() ON UPDATE NOW()")) @map("updated_at") @db.DateTime
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@map("recipe_images")
}

model RecipeItem {
  id            Int            @id @default(autoincrement())
  recipeId      String         @map("recipe_id")
  name          String
  description   String         @db.Text
  createdAt     DateTime       @default(dbgenerated("NOW()")) @map("created_at") @db.DateTime
  updatedAt     DateTime       @default(dbgenerated("NOW() ON UPDATE NOW()")) @map("updated_at") @db.DateTime
  recipe        Recipe         @relation(fields: [recipeId], references: [id])
  shoppingItems ShoppingItem[]

  @@fulltext([name])
  @@map("recipe_items")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  recipeId  String   @map("recipe_id")
  createdAt DateTime @default(dbgenerated("NOW()")) @map("created_at") @db.DateTime
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@map("favorites")
}

model ShoppingMemo {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  name       String
  boughtFlag Boolean  @default(false) @map("bought_flag")
  createdAt  DateTime @default(dbgenerated("NOW()")) @map("created_at") @db.DateTime
  updatedAt  DateTime @default(dbgenerated("NOW() ON UPDATE NOW()")) @map("updated_at") @db.DateTime
  user       User     @relation(fields: [userId], references: [id])

  @@map("shopping_memos")
}

model ShoppingMenu {
  id            String         @id @default(cuid())
  userId        String         @map("user_id")
  recipeId      String         @map("recipe_id")
  name          String
  order         Int            @map("order") @db.UnsignedInt
  createdAt     DateTime       @default(dbgenerated("NOW()")) @map("created_at") @db.DateTime
  updatedAt     DateTime       @default(dbgenerated("NOW() ON UPDATE NOW()")) @map("updated_at") @db.DateTime
  user          User           @relation(fields: [userId], references: [id])
  recipe        Recipe         @relation(fields: [recipeId], references: [id])
  shoppingItems ShoppingItem[]

  @@map("shopping_menus")
}

model ShoppingItem {
  id             Int          @id @default(autoincrement())
  shoppingMenuId String       @map("shopping_menu_id")
  recipeItemId   Int          @map("recipe_item_id")
  boughtFlag     Boolean      @default(false) @map("bought_flag")
  createdAt      DateTime     @default(dbgenerated("NOW()")) @map("created_at") @db.DateTime
  updatedAt      DateTime     @default(dbgenerated("NOW() ON UPDATE NOW()")) @map("updated_at") @db.DateTime
  shoppingMenu   ShoppingMenu @relation(fields: [shoppingMenuId], references: [id])
  recipeItem     RecipeItem   @relation(fields: [recipeItemId], references: [id])

  @@map("shopping_items")
}

model Follow {
  id         Int      @id @default(autoincrement())
  followerId String   @map("follower_id")
  followedId String   @map("followed_id")
  createdAt  DateTime @default(dbgenerated("NOW()")) @map("created_at") @db.DateTime
  follower   User     @relation("follower", fields: [followerId], references: [id])
  followed   User     @relation("followed", fields: [followedId], references: [id])

  @@unique([followerId, followedId])
  @@map("follows")
}
